import * as THREE from '../lib/three.module.js';
import {
    OrbitControls
} from '../lib/OrbitControls.js';

window.addEventListener('DOMContentLoaded', async () => {
    const wrapper = document.querySelector('#webgl');
    const app = new ThreeApp(wrapper);
    await app.load();
    app.init();
    app.render();
}, false)

class ThreeApp {
    /**
     * ‰∫∫Â∑•Ë°õÊòü„ÅÆË∑ùÈõ¢
     */
    static PLANE_DISTANCE = 3.5;
    /**
     * ‰∫∫Â∑•Ë°õÊòü„ÅÆÂõûËª¢Âë®ÊúüÔºàÁßíÔºâ
     */
    static PLANE_ROTATION_PERIOD = 8.0;
    /**
     * üëÄ„ÅÆË∑ùÈõ¢
     */
    static EYES_DISTANCE = 3.2;

    /**
     * „Ç´„É°„É©ÂÆöÁæ©„ÅÆ„Åü„ÇÅ„ÅÆÂÆöÊï∞
     */
    static CAMERA_PARAM = {
        fovy: 60,
        aspect: window.innerWidth / window.innerHeight,
        near: 0.1,
        far: 30.0,
        position: new THREE.Vector3(0.0, 0.0, 10.0),
        lookAt: new THREE.Vector3(0.0, 0.0, 0.0),
    }
    /**
     * „É¨„É≥„ÉÄ„É©„ÉºÂÆöÁæ©„ÅÆ„Åü„ÇÅ„ÅÆÂÆöÊï∞
     */
    static RENDERER_PARAM = {
        clearColor: 0x111111,
        width: window.innerWidth,
        height: window.innerHeight,
    }
    /**
     * Âπ≥Ë°åÂÖâÊ∫êÂÆöÁæ©„ÅÆ„Åü„ÇÅ„ÅÆÂÆöÊï∞
     */
    static DIREECTIONAL_LIGHT_PARAM = {
        color: 0xffffff,
        intensity: 3.0,
        position: new THREE.Vector3(1.0, 1.0, 1.0),
    }
    /**
     * Áí∞Â¢ÉÂÖâÂÆöÁæ©„ÅÆ„Åü„ÇÅ„ÅÆÂÆöÊï∞
     */
    static AMBIENT_LIGHT_PARAM = {
        color: 0xffffff,
        intensity: 0.3,
    }
    /**
     * „Éû„ÉÜ„É™„Ç¢„É´ÂÆöÁæ©„ÅÆ„Åü„ÇÅ„ÅÆÂÆöÊï∞
     */
    static MATERIAL_PARAM = {
        planeColor: 0xeeeeee,
        eyeColor: 0xffffff,
    }
    static SPHERE_MATERIAL_PARAM = {
        color: 0xffffff,
        transparent: true, // ÈÄèÊòé„ÇíÊâ±„ÅÜ„Åã„Å©„ÅÜ„Åã
        opacity: 0.0, // ÈÄèÊòéÂ∫¶
        side: THREE.DoubleSide, // ÊèèÁîª„Åô„ÇãÈù¢Ôºà„Éê„ÉÉ„ÇØ„Éï„Çß„Ç§„Çπ„Ç´„É™„É≥„Ç∞„ÅÆË®≠ÂÆöÔºâ
    }
    /**
     * „Éï„Ç©„Ç∞ÂÆöÊôÇ„ÅÆ„Åü„ÇÅ„ÅÆÂÆöÊï∞
     */
    static FOG_PARAM = {
        color: 0xffffff,
        near: 10.0,
        far: 20.0,
    };

    // ÁõÆ„ÅÆÂõûËª¢ÈôêÂ∫¶
    static EYES_ROTATION_LIMIT_PERCENT = 0.65;
    // ÁõÆ„ÅÆÂõûËª¢ÈÅÖÂª∂Ë£úÈñì‰øÇÊï∞
    static EYES_ROTATION_LERP_FACTOR = 0.07;

    wrapper; // canvas„ÅÆË¶™Ë¶ÅÁ¥†
    renderer; // „É¨„É≥„ÉÄ„É©„Éº
    scene; // „Ç∑„Éº„É≥
    camera; // „Ç´„É°„É©
    directionalLight; // Âπ≥Ë°åÂÖâÊ∫ê
    ambientLight; // Áí∞Â¢ÉÂÖâ
    controls; // „Ç™„Éº„Éì„ÉÉ„Éà„Ç≥„É≥„Éà„É≠„Éº„É´
    axesHelper; // „Ç¢„ÇØ„Ç∑„Çπ„Éò„É´„Éë„Éº
    isDown; // „Ç≠„Éº„ÅÆÊäº‰∏ãÁõ£Ë¶ñÁî®„Éï„É©„Ç∞
    clock; // ÊôÇÈñìÁÆ°ÁêÜÁî®
    earth; // Âú∞ÁêÉ
    earthWrapper; // Âú∞ÁêÉ
    earthGeometry; // Âú∞ÁêÉÁî®„Ç∏„Ç™„É°„Éà„É™
    earthMaterial; // Âú∞ÁêÉÁî®„Éû„ÉÜ„É™„Ç¢„É´
    earthTexture; // Âú∞ÁêÉÁî®„ÉÜ„ÇØ„Çπ„ÉÅ„É£
    palne; // È£õË°åÊ©ü
    palneGeometry; // È£õË°åÊ©üÁî®„Ç∏„Ç™„É°„Éà„É™
    palneMaterial; // È£õË°åÊ©üÁî®„Éû„ÉÜ„É™„Ç¢„É´
    eyeGeometryHalfCircle; // ÁâáÁõÆÁî®„Ç∏„Ç™„É°„Éà„É™
    eyeGeometryPanel; // ÁâáÁõÆÁî®„Ç∏„Ç™„É°„Éà„É™
    eyeMaterial; // ÁâáÁõÆÁî®„Éû„ÉÜ„É™„Ç¢„É´
    eyesArray;
    eyesSphere;
    eyesSphereMaterial;
    eyesGroup; // ‰∏°ÁõÆ„Ç∞„É´„Éº„Éó
    eyesWrapper; // ‰∏°ÁõÆ„Ç∞„É´„Éº„Éó
    eyesVector;
    pointerVector;
    subVector;
    targetRotation; // ÁõÆÊ®ôÂõûËª¢ÂÄ§



    /**
     * „Ç≥„É≥„Çπ„Éà„É©„ÇØ„Çø
     * @constructor
     * @param {HTMLElemnt} wrapper - canvasË¶ÅÁ¥†„Çíappend„Åô„ÇãË¶™Ë¶ÅÁ¥†
     */
    constructor(wrapper) {

        // ÂàùÊúüÂåñÊôÇ„Å´canvas„Çíappend„Åß„Åç„Çã„Çà„ÅÜ„Å´„Éó„É≠„Éë„ÉÜ„Ç£„ÇíÁ∂≠ÊåÅ
        this.wrapper = wrapper;

        //ÂÜçËµ∑Âëº„Å≥Âá∫„Åó„ÅÆ„Åü„ÇÅ„ÅÆthisÂõ∫ÂÆö
        this.render = this.render.bind(this);

        // „Ç≠„Éº„ÅÆÊäº‰∏ã„ÇÑÈõ¢„ÅôÊìç‰Ωú„ÇíÊ§úÂá∫„Åß„Åç„Çã„Çà„ÅÜ„Å´„Åô„Çã
        window.addEventListener('keydown', (keyEvent) => {
            switch (keyEvent.key) {
                case ' ': // „Çπ„Éö„Éº„Çπ„Ç≠„Éº„ÅÆÂ†¥Âêà
                    this.isDown = true;
                    break;
                default:
            }
        }, false);
        window.addEventListener('keyup', (keyEvent) => {
            this.isDown = false;
        }, false);


        this.pointerVector = new THREE.Vector2();
        this.subVector = new THREE.Vector2();
        this.targetRotation = new THREE.Vector2();

        window.addEventListener('pointermove', (pointerEvent) => {
            const pointerX = pointerEvent.clientX;
            const pointerY = pointerEvent.clientY;

            // ÁîªÈù¢‰∏≠Â§Æ„ÇíËµ∑ÁÇπ„Å´„Åó„Åü -1.0 ~ 1.0 „Å´Â§âÊèõ
            const scaleX = pointerX / window.innerWidth * 2.0 - 1.0;
            const scaleY = pointerY / window.innerHeight * 2.0 - 1.0;

            this.pointerVector.set(
                scaleX,
                scaleY
            )

            this.subVector.subVectors(this.pointerVector, this.eyesVector);

        }, false);


        // „Ç¶„Ç§„É≥„Éâ„Ç¶„ÅÆ„É™„Çµ„Ç§„Ç∫Ê§úÁü•
        window.addEventListener('resize', () => {
            this.renderer.setSize(window.innerWidth, window.innerHeight);
            this.camera.aspect = window.innerWidth / window.innerHeight;
            this.camera.updateProjectionMatrix();
        }, false);
    }


    /**
     * „Ç¢„Çª„ÉÉ„Éà„ÅÆ„É≠„Éº„Éâ„ÇíË°å„ÅÜPromise
     */
    load() {
        return new Promise((resolve, reject) => {
            const earthPath = './earth.jpg';
            const loader = new THREE.TextureLoader();
            loader.load(earthPath, (earthTexture) => {
                // Âú∞ÁêÉÁî®
                this.earthTexture = earthTexture;
                // earthTexture.colorSpace = THREE.SRGBColorSpace;
                resolve();
            });
        })
    }

    /**
     * ÂàùÊúüÂåñÂá¶ÁêÜ
     */
    init() {
        // „É¨„É≥„ÉÄ„É©„Éº
        const color = new THREE.Color(ThreeApp.RENDERER_PARAM.clearColor);
        this.renderer = new THREE.WebGLRenderer();
        this.renderer.setClearColor(color);
        this.renderer.setSize(ThreeApp.RENDERER_PARAM.width, ThreeApp.RENDERER_PARAM.height);
        this.wrapper.appendChild(this.renderer.domElement);

        // „Ç∑„Éº„É≥
        this.scene = new THREE.Scene();

        // „Ç´„É°„É©
        this.camera = new THREE.PerspectiveCamera(
            ThreeApp.CAMERA_PARAM.fovy,
            ThreeApp.CAMERA_PARAM.aspect,
            ThreeApp.CAMERA_PARAM.near,
            ThreeApp.CAMERA_PARAM.far,
        );
        this.camera.position.copy(ThreeApp.CAMERA_PARAM.position);
        this.camera.lookAt(ThreeApp.CAMERA_PARAM.lookAt);

        // Âπ≥Ë°åÂÖâÊ∫ê
        this.directionalLight = new THREE.DirectionalLight(
            ThreeApp.DIREECTIONAL_LIGHT_PARAM.color,
            ThreeApp.DIREECTIONAL_LIGHT_PARAM.intensity
        );
        this.directionalLight.position.copy(ThreeApp.DIREECTIONAL_LIGHT_PARAM.position);
        this.scene.add(this.directionalLight);

        // Áí∞Â¢ÉÂÖâ
        this.ambientLight = new THREE.AmbientLight(
            ThreeApp.AMBIENT_LIGHT_PARAM.color,
            ThreeApp.AMBIENT_LIGHT_PARAM.intensity
        );
        this.scene.add(this.ambientLight);


        // Âú∞ÁêÉ„ÅÆ„É°„ÉÉ„Ç∑„É•‰ΩúÊàê
        this.earthGeometry = new THREE.SphereGeometry(2.6, 32, 32);
        this.earthMaterial = new THREE.MeshPhongMaterial(ThreeApp.MATERIAL_PARAM.planeColor);
        this.earthMaterial.map = this.earthTexture;
        this.earth = new THREE.Mesh(this.earthGeometry, this.earthMaterial);
        this.earthWrapper = new THREE.Group();
        this.earthWrapper.add(this.earth);
        this.scene.add(this.earthWrapper);
        this.earthWrapper.rotation.z = (360 / -23.4) * (Math.PI / 180);

        // È£õË°åÊ©ü„ÅÆ„É°„ÉÉ„Ç∑„É•‰ΩúÊàê
        // this.planeGeometry = new THREE.ConeGeometry(0.2, 0.4, 32);
        const planeRadius = 0.2;
        this.planeGeometry = new THREE.SphereGeometry(planeRadius, 32, 32);
        this.planeMaterial = new THREE.MeshPhongMaterial(ThreeApp.MATERIAL_PARAM.planeColor);
        this.plane = new THREE.Mesh(this.planeGeometry, this.planeMaterial);
        // this.plane.position.y = ThreeApp.PLANE_DISTANCE - planeRadius;
        this.scene.add(this.plane);

        // üëÄ„ÅÆ„É°„ÉÉ„Ç∑„É•‰ΩúÊàêÊ∫ñÂÇô
        this.eyeGeometryHalfCircle = new THREE.CircleGeometry(0.1, 32, 0, Math.PI);
        this.eyeGeometryPanel = new THREE.PlaneGeometry(0.2, 0.3);
        this.eyeMaterial = new THREE.MeshBasicMaterial(ThreeApp.MATERIAL_PARAM.eyeColor);

        this.eyesSphereMaterial = new THREE.MeshPhongMaterial(ThreeApp.SPHERE_MATERIAL_PARAM);
        this.eyesSphere = new THREE.Mesh(this.earthGeometry, this.eyesSphereMaterial);

        this.eyesGroup = new THREE.Group();
        this.eyesWrapper = new THREE.Group();
        this.eyesWrapper.add(this.eyesSphere);
        this.eyesArray = [];

        // üëÄ„ÅÆ„É°„ÉÉ„Ç∑„É•‰ΩúÊàê
        for (let i = 0; i < 2; ++i) {
            const eye = new THREE.Group();
            const eyeHalfCircleTop = new THREE.Mesh(this.eyeGeometryHalfCircle, this.eyeMaterial);
            const eyeHalfCircleBottom = new THREE.Mesh(this.eyeGeometryHalfCircle, this.eyeMaterial);
            const eyePanel = new THREE.Mesh(this.eyeGeometryPanel, this.eyeMaterial);

            eyeHalfCircleTop.position.y = 0.15;
            eyeHalfCircleBottom.position.y = -0.15;
            eyeHalfCircleBottom.rotation.z = Math.PI;

            eye.add(eyeHalfCircleTop)
            eye.add(eyeHalfCircleBottom)
            eye.add(eyePanel)

            if (i === 0) {
                eye.position.x = 0.2;
            } else {
                eye.position.x = -0.2;
            }

            this.eyesGroup.add(eye);
            this.eyesArray.push(eye);
        }

        this.eyesGroup.position.set(0.0, 0.0, ThreeApp.EYES_DISTANCE);
        this.eyesWrapper.add(this.eyesGroup);
        this.scene.add(this.eyesWrapper);

        // üëÄ„ÅÆÂõûËª¢ÂàùÊúüÂÄ§„ÇíË®≠ÂÆö
        this.eyesVector = new THREE.Vector2(
            this.eyesWrapper.rotation.x,
            this.eyesWrapper.rotation.y
        );



        // clock„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„ÇíÁîüÊàê
        this.clock = new THREE.Clock();


        // Ëª∏„Éò„É´„Éë„Éº
        const axesBarLength = 5.0;
        this.axesHelper = new THREE.AxesHelper(axesBarLength);
        // this.scene.add(this.axesHelper);

        // „Ç≥„É≥„Éà„É≠„Éº„É´
        this.controls = new OrbitControls(this.camera, this.renderer.domElement);

        // this „ÅÆ„Éê„Ç§„É≥„Éâ
        this.render = this.render.bind(this);
        // „Ç≠„Éº„ÅÆÊäº‰∏ãÁä∂ÊÖã„Çí‰øùÊåÅ„Åô„Çã„Éï„É©„Ç∞
        this.isDown = false;
    }




    /**
     * ÊèèÁîªÂá¶ÁêÜ
     */
    render() {
        // ÊÅíÂ∏∏„É´„Éº„Éó
        requestAnimationFrame(this.render); // FPSÊØé„Å´Ëá™Ë∫´„ÇíÂëº„Å≥Âá∫„Åô

        // „Ç™„Éº„Éì„ÉÉ„Éà„Ç≥„É≥„Éà„É≠„Éº„É´
        // this.controls.update();

        const time = this.clock.getElapsedTime();
        // ÂõûËª¢Âë®Êúü„ÇíËÄÉÊÖÆ„Åó„ÅüÊôÇÈñìË®àÁÆóÔºà2œÄ / Âë®ÊúüÁßí „ÅßËßíÈÄüÂ∫¶„ÇíË™øÊï¥Ôºâ
        const rotateSpeed = time * (2 * Math.PI / ThreeApp.PLANE_ROTATION_PERIOD);

        this.plane.position.set(
            Math.cos(rotateSpeed) * ThreeApp.PLANE_DISTANCE,
            Math.sin(rotateSpeed) * ThreeApp.PLANE_DISTANCE,
            0.0
        );

        this.earth.rotation.y += 0.006;


        // ÁõÆÊ®ôÂõûËª¢ÂÄ§„ÇíË®àÁÆó
        this.targetRotation.set(
            this.subVector.x * ThreeApp.EYES_ROTATION_LIMIT_PERCENT,
            this.subVector.y * ThreeApp.EYES_ROTATION_LIMIT_PERCENT
        );

        // ÁèæÂú®„ÅÆÂõûËª¢ÂÄ§„Åã„ÇâÁõÆÊ®ôÂõûËª¢ÂÄ§„Å∏Á∑öÂΩ¢Ë£úÈñì„ÅßÈÅÖÂª∂Êõ¥Êñ∞
        this.eyesWrapper.rotation.y = THREE.MathUtils.lerp(
            this.eyesWrapper.rotation.y,
            this.targetRotation.x,
            ThreeApp.EYES_ROTATION_LERP_FACTOR
        );
        this.eyesWrapper.rotation.x = THREE.MathUtils.lerp(
            this.eyesWrapper.rotation.x,
            this.targetRotation.y,
            ThreeApp.EYES_ROTATION_LERP_FACTOR
        );


        // „É¨„É≥„ÉÄ„É©„Éº„ÅßÊèèÁîª
        this.renderer.render(this.scene, this.camera);
    }
}